// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PaymentServiceClient is the client API for PaymentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PaymentServiceClient interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*Response, error)
	Get(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	List(ctx context.Context, in *PaginationRequest, opts ...grpc.CallOption) (*ListResponse, error)
	GetByType(ctx context.Context, in *GetByTypeRequest, opts ...grpc.CallOption) (*Response, error)
	ListByType(ctx context.Context, in *ListByTypeRequest, opts ...grpc.CallOption) (*ListResponse, error)
	GetByReference(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Response, error)
	ListByReference(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	GetByAccountFrom(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Response, error)
	ListByAccountFrom(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	GetByAccountTo(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Response, error)
	ListByAccountTo(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
}

type paymentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPaymentServiceClient(cc grpc.ClientConnInterface) PaymentServiceClient {
	return &paymentServiceClient{cc}
}

func (c *paymentServiceClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/github.com.edlanioj.kbu.payments.PaymentService/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) Get(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/github.com.edlanioj.kbu.payments.PaymentService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) List(ctx context.Context, in *PaginationRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, "/github.com.edlanioj.kbu.payments.PaymentService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) GetByType(ctx context.Context, in *GetByTypeRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/github.com.edlanioj.kbu.payments.PaymentService/GetByType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) ListByType(ctx context.Context, in *ListByTypeRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, "/github.com.edlanioj.kbu.payments.PaymentService/ListByType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) GetByReference(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/github.com.edlanioj.kbu.payments.PaymentService/GetByReference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) ListByReference(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, "/github.com.edlanioj.kbu.payments.PaymentService/ListByReference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) GetByAccountFrom(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/github.com.edlanioj.kbu.payments.PaymentService/GetByAccountFrom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) ListByAccountFrom(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, "/github.com.edlanioj.kbu.payments.PaymentService/ListByAccountFrom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) GetByAccountTo(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/github.com.edlanioj.kbu.payments.PaymentService/GetByAccountTo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) ListByAccountTo(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, "/github.com.edlanioj.kbu.payments.PaymentService/ListByAccountTo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PaymentServiceServer is the server API for PaymentService service.
// All implementations must embed UnimplementedPaymentServiceServer
// for forward compatibility
type PaymentServiceServer interface {
	Register(context.Context, *RegisterRequest) (*Response, error)
	Get(context.Context, *Request) (*Response, error)
	List(context.Context, *PaginationRequest) (*ListResponse, error)
	GetByType(context.Context, *GetByTypeRequest) (*Response, error)
	ListByType(context.Context, *ListByTypeRequest) (*ListResponse, error)
	GetByReference(context.Context, *GetRequest) (*Response, error)
	ListByReference(context.Context, *ListRequest) (*ListResponse, error)
	GetByAccountFrom(context.Context, *GetRequest) (*Response, error)
	ListByAccountFrom(context.Context, *ListRequest) (*ListResponse, error)
	GetByAccountTo(context.Context, *GetRequest) (*Response, error)
	ListByAccountTo(context.Context, *ListRequest) (*ListResponse, error)
	mustEmbedUnimplementedPaymentServiceServer()
}

// UnimplementedPaymentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPaymentServiceServer struct {
}

func (UnimplementedPaymentServiceServer) Register(context.Context, *RegisterRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedPaymentServiceServer) Get(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedPaymentServiceServer) List(context.Context, *PaginationRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedPaymentServiceServer) GetByType(context.Context, *GetByTypeRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByType not implemented")
}
func (UnimplementedPaymentServiceServer) ListByType(context.Context, *ListByTypeRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListByType not implemented")
}
func (UnimplementedPaymentServiceServer) GetByReference(context.Context, *GetRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByReference not implemented")
}
func (UnimplementedPaymentServiceServer) ListByReference(context.Context, *ListRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListByReference not implemented")
}
func (UnimplementedPaymentServiceServer) GetByAccountFrom(context.Context, *GetRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByAccountFrom not implemented")
}
func (UnimplementedPaymentServiceServer) ListByAccountFrom(context.Context, *ListRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListByAccountFrom not implemented")
}
func (UnimplementedPaymentServiceServer) GetByAccountTo(context.Context, *GetRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByAccountTo not implemented")
}
func (UnimplementedPaymentServiceServer) ListByAccountTo(context.Context, *ListRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListByAccountTo not implemented")
}
func (UnimplementedPaymentServiceServer) mustEmbedUnimplementedPaymentServiceServer() {}

// UnsafePaymentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PaymentServiceServer will
// result in compilation errors.
type UnsafePaymentServiceServer interface {
	mustEmbedUnimplementedPaymentServiceServer()
}

func RegisterPaymentServiceServer(s grpc.ServiceRegistrar, srv PaymentServiceServer) {
	s.RegisterService(&PaymentService_ServiceDesc, srv)
}

func _PaymentService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.edlanioj.kbu.payments.PaymentService/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.edlanioj.kbu.payments.PaymentService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).Get(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaginationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.edlanioj.kbu.payments.PaymentService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).List(ctx, req.(*PaginationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_GetByType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).GetByType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.edlanioj.kbu.payments.PaymentService/GetByType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).GetByType(ctx, req.(*GetByTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_ListByType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListByTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).ListByType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.edlanioj.kbu.payments.PaymentService/ListByType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).ListByType(ctx, req.(*ListByTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_GetByReference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).GetByReference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.edlanioj.kbu.payments.PaymentService/GetByReference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).GetByReference(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_ListByReference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).ListByReference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.edlanioj.kbu.payments.PaymentService/ListByReference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).ListByReference(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_GetByAccountFrom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).GetByAccountFrom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.edlanioj.kbu.payments.PaymentService/GetByAccountFrom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).GetByAccountFrom(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_ListByAccountFrom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).ListByAccountFrom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.edlanioj.kbu.payments.PaymentService/ListByAccountFrom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).ListByAccountFrom(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_GetByAccountTo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).GetByAccountTo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.edlanioj.kbu.payments.PaymentService/GetByAccountTo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).GetByAccountTo(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_ListByAccountTo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).ListByAccountTo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.edlanioj.kbu.payments.PaymentService/ListByAccountTo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).ListByAccountTo(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PaymentService_ServiceDesc is the grpc.ServiceDesc for PaymentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PaymentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.edlanioj.kbu.payments.PaymentService",
	HandlerType: (*PaymentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _PaymentService_Register_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _PaymentService_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _PaymentService_List_Handler,
		},
		{
			MethodName: "GetByType",
			Handler:    _PaymentService_GetByType_Handler,
		},
		{
			MethodName: "ListByType",
			Handler:    _PaymentService_ListByType_Handler,
		},
		{
			MethodName: "GetByReference",
			Handler:    _PaymentService_GetByReference_Handler,
		},
		{
			MethodName: "ListByReference",
			Handler:    _PaymentService_ListByReference_Handler,
		},
		{
			MethodName: "GetByAccountFrom",
			Handler:    _PaymentService_GetByAccountFrom_Handler,
		},
		{
			MethodName: "ListByAccountFrom",
			Handler:    _PaymentService_ListByAccountFrom_Handler,
		},
		{
			MethodName: "GetByAccountTo",
			Handler:    _PaymentService_GetByAccountTo_Handler,
		},
		{
			MethodName: "ListByAccountTo",
			Handler:    _PaymentService_ListByAccountTo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "payment.proto",
}
