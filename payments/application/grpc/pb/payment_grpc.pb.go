// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PaymentServiceClient is the client API for PaymentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PaymentServiceClient interface {
	List(ctx context.Context, in *PaginationParams, opts ...grpc.CallOption) (*ListResult, error)
	Get(ctx context.Context, in *Params, opts ...grpc.CallOption) (*PaymentResult, error)
	Complete(ctx context.Context, in *Params, opts ...grpc.CallOption) (*PaymentResult, error)
	Error(ctx context.Context, in *Params, opts ...grpc.CallOption) (*PaymentResult, error)
	GetByAccountDestination(ctx context.Context, in *GetByParams, opts ...grpc.CallOption) (*PaymentResult, error)
	ListByAccountDestination(ctx context.Context, in *ListByParams, opts ...grpc.CallOption) (*ListResult, error)
	RegisterAccountPayment(ctx context.Context, in *CreateParams, opts ...grpc.CallOption) (*PaymentResult, error)
	GetByService(ctx context.Context, in *GetByParams, opts ...grpc.CallOption) (*PaymentResult, error)
	ListByService(ctx context.Context, in *ListByParams, opts ...grpc.CallOption) (*ListResult, error)
	RegisterServicePayment(ctx context.Context, in *CreateServiceParams, opts ...grpc.CallOption) (*PaymentResult, error)
	GetByStore(ctx context.Context, in *GetByParams, opts ...grpc.CallOption) (*PaymentResult, error)
	ListByStore(ctx context.Context, in *ListByParams, opts ...grpc.CallOption) (*ListResult, error)
	RegisterStorePayment(ctx context.Context, in *CreateParams, opts ...grpc.CallOption) (*PaymentResult, error)
}

type paymentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPaymentServiceClient(cc grpc.ClientConnInterface) PaymentServiceClient {
	return &paymentServiceClient{cc}
}

func (c *paymentServiceClient) List(ctx context.Context, in *PaginationParams, opts ...grpc.CallOption) (*ListResult, error) {
	out := new(ListResult)
	err := c.cc.Invoke(ctx, "/github.com.edlanioj.kbu.payments.PaymentService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) Get(ctx context.Context, in *Params, opts ...grpc.CallOption) (*PaymentResult, error) {
	out := new(PaymentResult)
	err := c.cc.Invoke(ctx, "/github.com.edlanioj.kbu.payments.PaymentService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) Complete(ctx context.Context, in *Params, opts ...grpc.CallOption) (*PaymentResult, error) {
	out := new(PaymentResult)
	err := c.cc.Invoke(ctx, "/github.com.edlanioj.kbu.payments.PaymentService/Complete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) Error(ctx context.Context, in *Params, opts ...grpc.CallOption) (*PaymentResult, error) {
	out := new(PaymentResult)
	err := c.cc.Invoke(ctx, "/github.com.edlanioj.kbu.payments.PaymentService/Error", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) GetByAccountDestination(ctx context.Context, in *GetByParams, opts ...grpc.CallOption) (*PaymentResult, error) {
	out := new(PaymentResult)
	err := c.cc.Invoke(ctx, "/github.com.edlanioj.kbu.payments.PaymentService/GetByAccountDestination", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) ListByAccountDestination(ctx context.Context, in *ListByParams, opts ...grpc.CallOption) (*ListResult, error) {
	out := new(ListResult)
	err := c.cc.Invoke(ctx, "/github.com.edlanioj.kbu.payments.PaymentService/ListByAccountDestination", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) RegisterAccountPayment(ctx context.Context, in *CreateParams, opts ...grpc.CallOption) (*PaymentResult, error) {
	out := new(PaymentResult)
	err := c.cc.Invoke(ctx, "/github.com.edlanioj.kbu.payments.PaymentService/RegisterAccountPayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) GetByService(ctx context.Context, in *GetByParams, opts ...grpc.CallOption) (*PaymentResult, error) {
	out := new(PaymentResult)
	err := c.cc.Invoke(ctx, "/github.com.edlanioj.kbu.payments.PaymentService/GetByService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) ListByService(ctx context.Context, in *ListByParams, opts ...grpc.CallOption) (*ListResult, error) {
	out := new(ListResult)
	err := c.cc.Invoke(ctx, "/github.com.edlanioj.kbu.payments.PaymentService/ListByService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) RegisterServicePayment(ctx context.Context, in *CreateServiceParams, opts ...grpc.CallOption) (*PaymentResult, error) {
	out := new(PaymentResult)
	err := c.cc.Invoke(ctx, "/github.com.edlanioj.kbu.payments.PaymentService/RegisterServicePayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) GetByStore(ctx context.Context, in *GetByParams, opts ...grpc.CallOption) (*PaymentResult, error) {
	out := new(PaymentResult)
	err := c.cc.Invoke(ctx, "/github.com.edlanioj.kbu.payments.PaymentService/GetByStore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) ListByStore(ctx context.Context, in *ListByParams, opts ...grpc.CallOption) (*ListResult, error) {
	out := new(ListResult)
	err := c.cc.Invoke(ctx, "/github.com.edlanioj.kbu.payments.PaymentService/ListByStore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) RegisterStorePayment(ctx context.Context, in *CreateParams, opts ...grpc.CallOption) (*PaymentResult, error) {
	out := new(PaymentResult)
	err := c.cc.Invoke(ctx, "/github.com.edlanioj.kbu.payments.PaymentService/RegisterStorePayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PaymentServiceServer is the server API for PaymentService service.
// All implementations must embed UnimplementedPaymentServiceServer
// for forward compatibility
type PaymentServiceServer interface {
	List(context.Context, *PaginationParams) (*ListResult, error)
	Get(context.Context, *Params) (*PaymentResult, error)
	Complete(context.Context, *Params) (*PaymentResult, error)
	Error(context.Context, *Params) (*PaymentResult, error)
	GetByAccountDestination(context.Context, *GetByParams) (*PaymentResult, error)
	ListByAccountDestination(context.Context, *ListByParams) (*ListResult, error)
	RegisterAccountPayment(context.Context, *CreateParams) (*PaymentResult, error)
	GetByService(context.Context, *GetByParams) (*PaymentResult, error)
	ListByService(context.Context, *ListByParams) (*ListResult, error)
	RegisterServicePayment(context.Context, *CreateServiceParams) (*PaymentResult, error)
	GetByStore(context.Context, *GetByParams) (*PaymentResult, error)
	ListByStore(context.Context, *ListByParams) (*ListResult, error)
	RegisterStorePayment(context.Context, *CreateParams) (*PaymentResult, error)
	mustEmbedUnimplementedPaymentServiceServer()
}

// UnimplementedPaymentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPaymentServiceServer struct {
}

func (UnimplementedPaymentServiceServer) List(context.Context, *PaginationParams) (*ListResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedPaymentServiceServer) Get(context.Context, *Params) (*PaymentResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedPaymentServiceServer) Complete(context.Context, *Params) (*PaymentResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Complete not implemented")
}
func (UnimplementedPaymentServiceServer) Error(context.Context, *Params) (*PaymentResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Error not implemented")
}
func (UnimplementedPaymentServiceServer) GetByAccountDestination(context.Context, *GetByParams) (*PaymentResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByAccountDestination not implemented")
}
func (UnimplementedPaymentServiceServer) ListByAccountDestination(context.Context, *ListByParams) (*ListResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListByAccountDestination not implemented")
}
func (UnimplementedPaymentServiceServer) RegisterAccountPayment(context.Context, *CreateParams) (*PaymentResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterAccountPayment not implemented")
}
func (UnimplementedPaymentServiceServer) GetByService(context.Context, *GetByParams) (*PaymentResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByService not implemented")
}
func (UnimplementedPaymentServiceServer) ListByService(context.Context, *ListByParams) (*ListResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListByService not implemented")
}
func (UnimplementedPaymentServiceServer) RegisterServicePayment(context.Context, *CreateServiceParams) (*PaymentResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterServicePayment not implemented")
}
func (UnimplementedPaymentServiceServer) GetByStore(context.Context, *GetByParams) (*PaymentResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByStore not implemented")
}
func (UnimplementedPaymentServiceServer) ListByStore(context.Context, *ListByParams) (*ListResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListByStore not implemented")
}
func (UnimplementedPaymentServiceServer) RegisterStorePayment(context.Context, *CreateParams) (*PaymentResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterStorePayment not implemented")
}
func (UnimplementedPaymentServiceServer) mustEmbedUnimplementedPaymentServiceServer() {}

// UnsafePaymentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PaymentServiceServer will
// result in compilation errors.
type UnsafePaymentServiceServer interface {
	mustEmbedUnimplementedPaymentServiceServer()
}

func RegisterPaymentServiceServer(s grpc.ServiceRegistrar, srv PaymentServiceServer) {
	s.RegisterService(&PaymentService_ServiceDesc, srv)
}

func _PaymentService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaginationParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.edlanioj.kbu.payments.PaymentService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).List(ctx, req.(*PaginationParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Params)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.edlanioj.kbu.payments.PaymentService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).Get(ctx, req.(*Params))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_Complete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Params)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).Complete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.edlanioj.kbu.payments.PaymentService/Complete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).Complete(ctx, req.(*Params))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_Error_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Params)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).Error(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.edlanioj.kbu.payments.PaymentService/Error",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).Error(ctx, req.(*Params))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_GetByAccountDestination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).GetByAccountDestination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.edlanioj.kbu.payments.PaymentService/GetByAccountDestination",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).GetByAccountDestination(ctx, req.(*GetByParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_ListByAccountDestination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListByParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).ListByAccountDestination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.edlanioj.kbu.payments.PaymentService/ListByAccountDestination",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).ListByAccountDestination(ctx, req.(*ListByParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_RegisterAccountPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).RegisterAccountPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.edlanioj.kbu.payments.PaymentService/RegisterAccountPayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).RegisterAccountPayment(ctx, req.(*CreateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_GetByService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).GetByService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.edlanioj.kbu.payments.PaymentService/GetByService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).GetByService(ctx, req.(*GetByParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_ListByService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListByParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).ListByService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.edlanioj.kbu.payments.PaymentService/ListByService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).ListByService(ctx, req.(*ListByParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_RegisterServicePayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateServiceParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).RegisterServicePayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.edlanioj.kbu.payments.PaymentService/RegisterServicePayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).RegisterServicePayment(ctx, req.(*CreateServiceParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_GetByStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).GetByStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.edlanioj.kbu.payments.PaymentService/GetByStore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).GetByStore(ctx, req.(*GetByParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_ListByStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListByParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).ListByStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.edlanioj.kbu.payments.PaymentService/ListByStore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).ListByStore(ctx, req.(*ListByParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_RegisterStorePayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).RegisterStorePayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.edlanioj.kbu.payments.PaymentService/RegisterStorePayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).RegisterStorePayment(ctx, req.(*CreateParams))
	}
	return interceptor(ctx, in, info, handler)
}

// PaymentService_ServiceDesc is the grpc.ServiceDesc for PaymentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PaymentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.edlanioj.kbu.payments.PaymentService",
	HandlerType: (*PaymentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _PaymentService_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _PaymentService_Get_Handler,
		},
		{
			MethodName: "Complete",
			Handler:    _PaymentService_Complete_Handler,
		},
		{
			MethodName: "Error",
			Handler:    _PaymentService_Error_Handler,
		},
		{
			MethodName: "GetByAccountDestination",
			Handler:    _PaymentService_GetByAccountDestination_Handler,
		},
		{
			MethodName: "ListByAccountDestination",
			Handler:    _PaymentService_ListByAccountDestination_Handler,
		},
		{
			MethodName: "RegisterAccountPayment",
			Handler:    _PaymentService_RegisterAccountPayment_Handler,
		},
		{
			MethodName: "GetByService",
			Handler:    _PaymentService_GetByService_Handler,
		},
		{
			MethodName: "ListByService",
			Handler:    _PaymentService_ListByService_Handler,
		},
		{
			MethodName: "RegisterServicePayment",
			Handler:    _PaymentService_RegisterServicePayment_Handler,
		},
		{
			MethodName: "GetByStore",
			Handler:    _PaymentService_GetByStore_Handler,
		},
		{
			MethodName: "ListByStore",
			Handler:    _PaymentService_ListByStore_Handler,
		},
		{
			MethodName: "RegisterStorePayment",
			Handler:    _PaymentService_RegisterStorePayment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "payment.proto",
}
